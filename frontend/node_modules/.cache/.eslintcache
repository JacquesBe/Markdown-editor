[{"/Users/jacquesbecker/Documents/CS3/proj2/25059726/frontend/src/index.js":"1","/Users/jacquesbecker/Documents/CS3/proj2/25059726/frontend/src/App.js":"2","/Users/jacquesbecker/Documents/CS3/proj2/25059726/frontend/src/reportWebVitals.js":"3","/Users/jacquesbecker/Documents/CS3/proj2/25059726/frontend/src/components/home.js":"4","/Users/jacquesbecker/Documents/CS3/proj2/25059726/frontend/src/components/loginform.js":"5","/Users/jacquesbecker/Documents/CS3/proj2/25059726/frontend/src/components/addnote.js":"6","/Users/jacquesbecker/Documents/CS3/proj2/25059726/frontend/src/components/profile.js":"7","/Users/jacquesbecker/Documents/CS3/proj2/25059726/frontend/src/components/editCat.js":"8","/Users/jacquesbecker/Documents/CS3/proj2/25059726/frontend/src/components/note.js":"9","/Users/jacquesbecker/Documents/CS3/proj2/25059726/frontend/src/components/registerform.js":"10","/Users/jacquesbecker/Documents/CS3/proj2/25059726/frontend/src/components/searchbar.js":"11"},{"size":535,"mtime":1697486789543,"results":"12","hashOfConfig":"13"},{"size":986,"mtime":1697486789542,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1697486789543,"results":"15","hashOfConfig":"13"},{"size":14292,"mtime":1697486789542,"results":"16","hashOfConfig":"13"},{"size":5163,"mtime":1697486789543,"results":"17","hashOfConfig":"13"},{"size":6256,"mtime":1697486789542,"results":"18","hashOfConfig":"13"},{"size":6326,"mtime":1697486789543,"results":"19","hashOfConfig":"13"},{"size":7410,"mtime":1697486789542,"results":"20","hashOfConfig":"13"},{"size":5604,"mtime":1697486789543,"results":"21","hashOfConfig":"13"},{"size":5483,"mtime":1697486789543,"results":"22","hashOfConfig":"13"},{"size":955,"mtime":1697486789543,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hnzkej",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jacquesbecker/Documents/CS3/proj2/25059726/frontend/src/index.js",[],[],"/Users/jacquesbecker/Documents/CS3/proj2/25059726/frontend/src/App.js",["63"],[],"import React from \"react\";\nimport \"./index.css\";\nimport Loginform from \"./components/loginform\";\nimport { Routes, Route, BrowserRouter, Outlet } from 'react-router-dom';\nimport HomePage  from \"./components/home\";\nimport NotesPage from \"./components/note\";\nimport ProfilePage from \"./components/profile\";\nimport RegisterPage from \"./components/registerform\";\nimport AddNote from \"./components/addnote\";\nimport Editcat from \"./components/editCat\";\n\n\nexport default function App () {\n  return (\n    <>\n      <BrowserRouter>\n        <Routes>\n          <Route path='/' element={<Loginform/>}/>\n          <Route path='/home' element={<HomePage/>}/>\n          <Route path='note' element={<NotesPage/>}/>\n          <Route path=\"/profile\" element={<ProfilePage/>}/>\n          <Route path=\"/register\" element={<RegisterPage/>}/>\n          <Route path=\"/addnote\" element={<AddNote/>}/>\n          <Route path='/editcat' element={<Editcat/>}/>\n        </Routes>\n      </BrowserRouter>\n    </>\n  )\n};","/Users/jacquesbecker/Documents/CS3/proj2/25059726/frontend/src/reportWebVitals.js",[],[],"/Users/jacquesbecker/Documents/CS3/proj2/25059726/frontend/src/components/home.js",["64","65","66"],[],"import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport SearchBar from './searchbar';\nimport { useNavigate } from 'react-router-dom';\nimport Cookies from 'js-cookie';\n\n\nexport default function HomePage(props) {\n    const [notes, setNotes] = useState([])\n    const location = useLocation();\n    const [filteredNotes, setFilteredNotes] = useState([]);\n    const token = location.state.token;\n    const navigate = useNavigate();\n    const [user, setUser] = useState([])\n\n\n    const handleSignout = () => {   \n        if (token) {\n            Cookies.remove('token');\n        }\n        navigate('/');\n    };\n    \n    //const [currentNote, setCurrentNote] = useState(null);\n    useEffect(() => {\n        // Fetch user data from the API\n        const fetchUser = async () => {\n            try {\n                const response = await fetch('http://localhost:3000/users/me', {\n                    method: 'GET',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Action': 'getuser',\n                        'Authorization': token,\n                    },\n                });\n                if (response.ok) {\n                    const data = await response.json();\n                    setUser(data); // Update the user state with the fetched user data\n            \n                } else {\n                    console.error('Failed to fetch user data');\n                }\n            } catch (error) {\n                console.error('An error occurred:', error);\n            }\n        };\n\n        // Call the fetchUser function when the component mounts\n        fetchUser();\n    }, []);\n\n    useEffect(() => {\n        // Fetch notes data from the API\n        const fetchNotes = async () => {\n            try {\n                const response = await fetch('http://localhost:3000/notes', {\n                    method: 'GET',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Action': 'getnotes',\n                        'Authorization': token,\n                    },\n                });\n                if (response.ok) {\n                    const data = await response.json();\n                    setNotes(data); // Update the filteredNotes state with the fetched data\n                } else {\n                    console.error('Failed to fetch notes data');\n                }\n            } catch (error) {\n                console.error('An error occurred:', error);\n            }\n        };\n\n        fetchNotes();\n    }, []);\n\n    const [sortOrder, setSortOrder] = useState('asc');\n    const [selectedCategory, setSelectedCategory] = useState('All');\n\n    const [categoryOptions, setCategories] = useState([]);\n\n    const filteredNotesByCategory = selectedCategory === 'All' ? filteredNotes : filteredNotes.filter(note => note.category_name === selectedCategory);\n    \n    const handleNoteDelete = async (noteToDelete) => {\n        try {\n            console.log(noteToDelete)\n            const response = await fetch(`http://localhost:3000/notes/${noteToDelete.note_id}`, {\n              method: 'DELETE',\n              headers: {\n                'Content-Type': 'application/json',\n                'Action': 'delete_note',\n                'Authorization' : token\n              },\n              body: JSON.stringify({\n\n              }),\n              //body: JSON.stringify(formData),\n            });\n            if (response.ok) { //MUST CHANGE TO RESPONSE.OK FOR LOGIN VALIDATION\n                const updatedNotes = filteredNotes.filter(obj => obj.note_id !== noteToDelete.note_id);\n                setFilteredNotes(updatedNotes);\n                console.log('note delete Succcesful');\n\n            } else if (!response.ok) {\n              // Handle login errors (e.g., display an error message).\n              console.log('unexpected error deleting note')\n                \n            }\n          } catch (error) {\n            // Handle network or request errors.\n            console.error('An error occurred:', error);\n          }\n    const updatedNotes = notes.filter(n => n !== noteToDelete);\n        // Update the notes state (assuming you have such a state in a higher component or another mechanism to manage your notes)\n    };\n\n    const handleCategoryChange = (event) => {\n        setSelectedCategory(event.target.value);\n      };\n      \n\n    const handleAvatarClick = () => {\n        navigate('/profile', {state: {'user': user, 'notes': notes, 'token': token}}); // Assuming '/profile' is the route to your profile component\n    };\n    \n    const handleNoteClick = (note) => {\n\n        navigate('/note', { state: { 'note': note, 'token': token } });\n      };\n\n    const handleEditCatagorys = () => {\n        navigate('/editcat', {state: {'token': token}}); // Make sure the path here matches the route in App.js\n    };\n    \n    \n    // Components for the search bar \n    const [searchTerm, setSearchTerm] = React.useState('');\n    \n\n\n    const handleNewNote = () => {\n        navigate('/addnote', {state: {'notes': notes, 'token': token, 'user': user}});\n    }\n\n    const handleSortClick = () => {\n        const sortedNotes = [...filteredNotes];\n      \n        if (sortOrder === 'asc') {\n          sortedNotes.sort((a, b) =>\n            a.last_update.localeCompare(b.last_update)\n          );\n        } else {\n          sortedNotes.sort((a, b) =>\n            b.last_update.localeCompare(a.last_update)\n          );\n        }\n      \n        setFilteredNotes(sortedNotes);\n        setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n      };\n\n    useEffect(() => {\n        const categories = notes.map(note => note.category_name);\n        const uniqueCategories = [...new Set(categories)];\n        setCategories(['All', ...uniqueCategories]);\n        \n    }, [notes]);\n\n\n    useEffect(() => {\n        if (notes.length !== 0) {\n            setFilteredNotes(notes.filter(note => \n                note.title.toLowerCase().includes(searchTerm.toLowerCase()))\n            );\n        }\n    }, [notes, searchTerm]);\n\n    \n\n\n      \n\n    return (\n        <div className=\"bg-custom-image p-8 w-full h-full min-h-screen\">\n            <div className=\"flex items-center justify-between pb-6\">\n                <div className=\"flex items-center\">\n                <button onClick={handleAvatarClick} className=\"focus:outline-none mr-4\">\n                    <img\n                    src={user.user_avatar || '/simple.jpg'}\n                    alt=\"User Avatar\"\n                    className=\"w-10 h-10 rounded-full hover:border-gray-400 hover-border-2\"\n                    />\n                </button>\n                <button onClick={handleSignout} className=\"focus:outline-none text-white underline\">\n                    Sign Out\n                </button>\n\n\n                </div>\n                <div className=\"flex items-center\">\n                <select\n                    value={selectedCategory}\n                    onChange={handleCategoryChange}\n                    className=\"px-2 py-2.5 bg-white border-grey rounded-md mr-2 ounded-lg border-2 border-gray-300 focus:border-green-400 focus:outline-none\"\n                >\n                    {categoryOptions.map((category, index) => (\n                    <option key={index} value={category}>\n                        {category}\n                    </option>\n                    ))}\n                </select>\n                <SearchBar onSearchChange={setSearchTerm} />\n                </div>\n                {/* ... [rest of the search and buttons, unchanged] ... */}\n            </div>\n            <div className=\"-mx-4 sm:-mx-8 px-4 sm:px-8 py-4 overflow-x-auto\">\n                <div className=\"inline-block min-w-full shadow rounded-lg overflow-hidden\">\n                    <table className=\"min-w-full leading-normal\">\n                        <thead>\n                            <tr>\n                                <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                                    Note Title\n                                </th>\n                                <th\n                                    className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\"\n                                    onClick={handleSortClick}\n                                    >\n                                    <button className=\"focus:outline-none\">\n                                        Last Updated At{' '}\n                                        {sortOrder === 'asc' ? '▲' : '▼'}\n                                    </button>\n                                </th>\n                                <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                                    Category\n                                </th>\n                                <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                                    Actions\n                                </th>\n\n                            </tr>\n                        </thead>\n                        <tbody >\n                            {filteredNotesByCategory.map((note, index) => (\n                                <tr key={index}>\n                                    <td className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\n                                        <div className=\"flex items-center\">\n                                            <div className=\"ml-3\">\n                                                <p className=\"text-gray-900 whitespace-no-wrap\">\n                                                    {note.title}\n                                                </p>\n                                            </div>\n                                        </div>\n                                    </td>\n\n                                    <td className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\n                                        <div className=\"flex items-center\">\n                                            <div className=\"ml-3\">\n                                                <p className=\"text-gray-900 whitespace-no-wrap\">\n                                                    {note.last_update}\n                                                </p>\n                                            </div>\n                                        </div>\n                                    </td>\n                                    \n\n                                    {/* Assuming each note has a \"createdAt\" property for the date */}\n                                    <td className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\n                                        <div className=\"flex items-center\">\n                                            <div className=\"ml-3\">\n                                                <p className=\"text-gray-900 whitespace-no-wrap\">\n                                                    {note.category_name}\n                                                </p>\n                                            </div>\n                                        </div>\n                                    </td>\n                                    <td className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\n                                        <button onClick={() => handleNoteClick(note)} className=\"relative inline-flex items-center justify-center p-0.5 mb-2 mr-2 overflow-hidden text-sm font-medium text-gray-900 rounded-lg group bg-gradient-to-br from-teal-300 to-lime-300 group-hover:from-teal-300 group-hover:to-lime-300 dark:text-white dark:hover:text-gray-900 focus:ring-4 focus:outline-none focus:ring-lime-200 dark:focus:ring-lime-800\">\n                                            <span className=\"relative px-5 py-2.5 transition-all ease-in duration-75 bg-white dark:bg-gray-900 rounded-md group-hover:bg-opacity-0\">\n                                                Edit\n                                            </span>\n                                        </button>\n                                        <button onClick={() => handleNoteDelete(note)} className=\"relative inline-flex items-center justify-center p-0.5 mb-2 ml-2 overflow-hidden text-sm font-medium text-gray-900 rounded-lg group bg-gradient-to-br from-red-300 to-red-500 group-hover:from-red-300 group-hover:to-red-500 dark:text-white dark:hover:text-gray-900 focus:ring-4 focus:outline-none focus:ring-red-200 dark:focus:ring-red-800\">\n                                            <span className=\"relative px-5 py-2.5 transition-all ease-in duration-75 bg-white dark:bg-gray-900 rounded-md group-hover:bg-opacity-0\">\n                                                Delete\n                                            </span>\n                                        </button>\n                                    </td>\n                                </tr>\n                                \n                            ))}\n                        </tbody>\n                    </table>\n                    <button\n                                onClick={() => handleNewNote()}\n                                className=\"fixed bottom-10 right-10 p-3 rounded-full bg-gray-50 text-grey-600 text-lg shadow-lg hover:bg-green-500 hover:text-gray-50 hover:border-green-500 hover:border-2\"\n                            >\n                                Add Note\n                        </button>\n                        <button\n                            onClick={() => handleEditCatagorys()}\n                            className=\"fixed bottom-10 left-10 p-3 rounded-full bg-gray-50 text-grey-600 text-lg shadow-lg hover:bg-green-500 hover:text-gray-50 hover:border-green-500 hover:border-2\"\n                            >\n                                Edit Categories\n                        </button>\n                    {/* ... [pagination controls, unchanged] ... */}\n                </div>\n            </div>\n        </div>\n        \n    );\n};","/Users/jacquesbecker/Documents/CS3/proj2/25059726/frontend/src/components/loginform.js",[],[],"/Users/jacquesbecker/Documents/CS3/proj2/25059726/frontend/src/components/addnote.js",["67","68","69","70","71"],[],"import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport { useEffect } from 'react';\n\n\nexport default function AddNote(props) {\n    const location = useLocation();\n    const [newnote, setnewnote] = useState('');\n    const [category, setcategory] = useState('');\n    const [content, setContent] = useState('');\n    const navigate = useNavigate();\n    const { notes, token ,user} = location.state;\n\n    const [categories, setCategories] = useState([]);\n   // const categories = ['Work', 'School', 'Personal', 'Other'];  \n\n   const getCats = async () => {\n    try {\n      const response = await fetch(`http://localhost:3000/categories`, {\n              method: 'GET',\n              headers: {\n                'Content-Type': 'application/json',\n                'Action': 'delete_note',\n                'Authorization' : token\n              }\n              //body: JSON.stringify(formData),\n            });\n            if (response.ok) {\n              const body = await response.json()\n              console.log(body)\n              setCategories(body)\n            } else {\n              console.log('unexpected error getting categories')\n            }\n    } catch (error) {\n        // Handle network or request errors.\n        console.error('An error occurred:', error);\n      }\n\n   };\n\n    const handleSaveChanges = async () => {\n        // Logic to save changes and redirect to home page after successful registration\n        const currentDate = new Date();\n\n        const year = currentDate.getFullYear();\n        const day = String(currentDate.getDate()).padStart(2, '0');\n        const month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Month is 0-based\n        const hours = String(currentDate.getHours()).padStart(2, '0');\n        const minutes = String(currentDate.getMinutes()).padStart(2, '0');\n        const seconds = String(currentDate.getSeconds()).padStart(2, '0');\n        const milliseconds = String(currentDate.getMilliseconds()).padStart(3, '0');\n        const isoDateString = `${year}-${month}-${day}T${hours}:${minutes}:${seconds}.${milliseconds}Z`;\n        console.log(isoDateString)\n        const tempNewNote = { 'note_id': '', 'title': newnote, 'content': content, 'category': category, 'last_update': isoDateString }\n\n        \n        try {\n            const response = await fetch('http://localhost:3000/notes', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                'Action': 'addnote',\n                'Authorization' : token,\n              },\n              body: JSON.stringify(tempNewNote),\n            });\n            if (response.ok) { //MUST CHANGE TO RESPONSE.OK FOR LOGIN VALIDATION\n              // Handle a successful login (e.g., redirect to another page).\n                try {\n                    const response = await fetch('http://localhost:3000/notes', {\n                    method: 'GET',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Action': 'getnotes',\n                        'Authorization': token\n                },\n                    });\n                    if (response.ok) { //MUST CHANGE TO RESPONSE.OK FOR LOGIN VALIDATION\n                        // Handle a successful login (e.g., redirect to another page).\n                        const body = await response.json();\n                        navigate('/home', { state: {'token': token} });\n                      } else {\n                        // Handle login errors (e.g., display an error message).\n                        console.error('Server Error');\n                      }\n                \n                } catch (error) {\n                console.error('An error occurred:', error);\n                }\n\n              //navigate('/home', { state: { notes, token } });\n            } else {\n              // Handle login errors (e.g., display an error message).\n              console.error('add Note Failed');\n            }\n          } catch (error) {\n            // Handle network or request errors.\n            console.error('An error occurred:', error);\n          }\n    };\n\n\n    \n    useEffect(() => {\n      // Call your function here to populate data\n      getCats();\n      \n    }, []);\n\n    return (\n        <div className=\"min-h-screen flex items-center justify-center bg-custom-image\">\n            \n            <div className=\"bg-white p-8 rounded-md w-full max-w-md mx-auto mt-10 \">\n                <div className=\"space-y-4\">\n                    <div>\n                        <label className=\"text-gray-600\" htmlFor=\"email\">Note Name</label>\n                        <input \n                            id=\"Name\"\n                            type=\"text\"\n                            onChange={e => setnewnote(e.target.value)}\n                            className=\"mt-1 w-full p-2 border rounded\"\n                        />\n                    </div>\n                    <div>\n                        <label className=\"text-gray-600\" htmlFor=\"username\">\n                          Category\n                        </label>\n                        <select\n                            id=\"category\"\n                            onChange={(e) => setcategory(e.target.value)}\n                            className=\"mt-1 w-full p-2 border rounded\"\n                        >\n                            {categories.map((cat, index) => (\n                                <option key={index} value={cat.name}>\n                                    {cat.name}\n                                </option>\n                            ))}\n                        </select>\n                    </div>\n                    <div className=\"flex justify-between items-center mt-6\">\n                        <button \n                            onClick={handleSaveChanges}\n                            className=\"w-full bg-green-400 text-gray-700 py-2 rounded-md hover:bg-green-500 focus:outline-none focus:ring-2 focus:ring-green-600\"\n                        >\n                            Save\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        );\n};","/Users/jacquesbecker/Documents/CS3/proj2/25059726/frontend/src/components/profile.js",["72"],[],"\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nexport default function ProfilePage() {\n    const location = useLocation();\n    const navigate = useNavigate();\n    const { notes, token, user } = location.state;\n    const [email, setEmail] = useState(user.email);\n    const [username, setUsername] = useState(user.username);\n    const [password, setPassword] = useState(user.password);\n    const [avatarURL, setAvatarURL] = useState(user.user_avatar);\n    const [reqPassword, setReqPassword] = useState(false);\n    console.log(user)\n\n    const handleDeleteAccount = async () => {\n        try {\n            if (window.confirm(\"Are you sure you want to delete your account?\")) {\n            const response = await fetch('http://localhost:3000/users/me', {\n              method: 'DELETE',\n              headers: {\n                'Content-Type': 'application/json',\n                'Action': 'delete',\n                'Authorization': token\n              },\n              body: JSON.stringify({\n                'username': username,\n                'email': email,\n                'password': password,\n                'user_avatar': avatarURL,\n              }),\n            \n            });\n            if (response.ok) { \n                console.log('Account Deleted');\n                navigate('/register', {state: {'notes': notes, 'token': token}});\n            }\n        }\n          } catch (error) {\n            console.error('An error occurred:', error);\n          }\n        \n    };\n\n    const handleSaveChanges = async () => {\n            if (!password || !username || !email) {\n                if (!password) {\n                    setReqPassword(true);\n                }\n            } else {\n\n            try {\n                const response = await fetch('http://localhost:3000/users/me', {\n                  method: 'PUT',\n                  headers: {\n                    'Content-Type': 'application/json',\n                    'Action': 'update',\n                    'Authorization': token\n                  },\n                  body: JSON.stringify({\n                    'username': username,\n                    'email': email,\n                    'password': password,\n                    'user_avatar': avatarURL,\n                  }),\n                  //body: JSON.stringify(formData),\n                });\n                if (response.ok) { //MUST CHANGE TO RESPONSE.OK FOR LOGIN VALIDATION\n                    const newUserInfo = {username: username, email: email, userAvatar:avatarURL, userId: user.userId}\n                    console.log('Update Succcesful');\n                    console.log(newUserInfo)\n                  navigate('/home', {state: {'token': token}});\n                }\n              } catch (error) {\n                // Handle network or request errors.\n                console.error('An error occurred:', error);\n              }\n            }\n    };\n\n\n    return (\n        \n    <div className=\"min-h-screen flex items-center justify-center bg-custom-image\">\n        \n        <div className=\"bg-white p-8 rounded-md w-full max-w-md mx-auto mt-10 \">\n            <div className=\"flex flex-col items-center mb-6\">\n                <img \n                    src={avatarURL || '/simple.jpg'} \n                    alt=\"User Avatar\"\n                    className=\"w-24 h-24 rounded-full mb-2\"\n                />\n                <span className=\"text-sm text-gray-600\">Your Avatar</span>\n            </div>\n            <h1 className=\"text-gray-600 font-bold mb-6\">Edit Profile</h1>\n            \n            <div className=\"space-y-4\">\n                <div>\n                    <label className=\"text-gray-600\" htmlFor=\"email\">Email</label>\n                    <input \n                        id=\"email\"\n                        type=\"email\"\n                        value={email}\n                        onChange={e => setEmail(e.target.value)}\n                        className={`mt-1 w-full p-2 border ${!email ? 'border-red-500 rounded' : 'rounded'}`}\n                    />\n                </div>\n                <div>\n                    <label className=\"text-gray-600\" htmlFor=\"username\">Username</label>\n                    <input \n                        id=\"username\"\n                        type=\"text\"\n                        value={username}\n                        onChange={e => setUsername(e.target.value)}\n                        className={`mt-1 w-full p-2 border ${!username ? 'border-red-500 rounded' : 'rounded'}`}\n                    />\n                </div>\n                <div>\n                    <label className=\"text-gray-600\" htmlFor=\"password\">Password</label>\n                    <input \n                        id=\"password\"\n                        type=\"password\"\n                        value={password}\n                        onChange={e => setPassword(e.target.value)}\n                        className={`mt-1 w-full p-2 border ${!password ? 'border-red-500 rounded' : 'rounded'}`}\n                    />\n                </div>\n                <div>\n                    <label className=\"text-gray-600\" htmlFor=\"avatarURL\">Avatar URL</label>\n                    <input \n                        id=\"avatarURL\"\n                        type=\"url\"\n                        value={user.user_avatar}\n                        onChange={e => setAvatarURL(e.target.value)}\n                        className=\"mt-1 w-full p-2 border rounded\"\n                        placeholder=\"Enter the URL for your avatar image\"\n                        />\n                    </div>\n                <div className=\"flex justify-between items-center mt-6\">\n                    <button \n                        onClick={handleSaveChanges}\n                        className=\"w-full bg-green-400 text-gray-700 py-2 rounded-md hover:bg-green-500 focus:outline-none focus:ring-2 focus:ring-green-600\"\n                    >\n                        Save Changes\n                    </button>\n                    <button \n                        onClick={handleDeleteAccount}\n                        className=\"text-red-600 hover:text-red-700 p-6\"\n                    >\n                        Delete\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n    );\n}\n","/Users/jacquesbecker/Documents/CS3/proj2/25059726/frontend/src/components/editCat.js",["73","74","75"],[],"import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport { useEffect } from 'react';\n\nexport default function Editcat(props) {\n    const navigate = useNavigate();\n    const [categories, setCategories] = useState([]);\n    const location = useLocation();\n    const token = location.state.token;\n    const [catEdit, setCatEdit] = useState('');\n    const [newCat, setNewCat] = useState('');\n    const [reqNewCat, setReqNewCat] = useState(false);\n    const [reqCatName, setReqCatName] = useState(false);\n\n\n    const handleSaveChanges = async () => {\n        // Implement the logic for saving changes here\n        if (!newCat) {\n            setReqNewCat(true)\n        } else {\n            try {\n            console.log(catEdit)\n            console.log(catEdit.name)\n           const response = await fetch(`http://localhost:3000/categories/${catEdit.category_id}`, {\n            method: 'PUT',\n            headers: {\n                    'Content-Type': 'application/json',\n                   'Authorization': token,\n             },\n             body: JSON.stringify({name: newCat}),\n           });\n           console.log(response)\n           if (response.ok) {\n               console.log('category succesfully edited');\n               navigate('/home', {state: {'token': token}})\n           }\n        } catch (error) {\n            console.error(error.message)\n            if (error.response) {\n                console.log(\"tests\", error.response.data)\n            }\n        }\n        }\n    };\n\n    const handleDeleteCategory = async () => {\n        // Implement the logic for deleting category here\n        try {\n            console.log(catEdit)\n           const response = await fetch(`http://localhost:3000/categories/${catEdit.category_id}`, {\n            method: 'DELETE',\n            headers: {\n                    'Content-Type': 'application/json',\n                   'Authorization': token,\n             },\n           });\n           console.log(response)\n           if (response.ok) {\n               console.log('category succesfully deleted');\n               navigate('/home', {state: {'token': token}})\n           }\n        } catch (error) {\n            console.error(error.message)\n            if (error.response) {\n                console.log(\"tests\", error.response.data)\n            }\n        }\n    }\n\n    const handleAddCategory = async () => {\n        console.log(newCat)\n\n        console.log(token)\n        if (!newCat) {\n            setReqNewCat(true);\n\n        } else {\n            try {\n               const response = await fetch(`http://localhost:3000/categories`, {\n                method: 'POST',\n                headers: {\n                        'Content-Type': 'application/json',\n                       'Authorization': token,\n                 },\n                 body: JSON.stringify({name: newCat}),\n               });\n               console.log(response)\n               if (response.ok) {\n                   console.log('category succesfully added');\n                   navigate('/home', {state: {'token': token}})\n               }\n            } catch (error) {\n                console.error(error.message)\n                if (error.response) {\n                    console.log(\"tests\", error.response.data)\n                }\n            }\n        }\n\n    };\n\n\n    const getCats = async () => {\n        try {\n          const response = await fetch('http://localhost:3000/categories', {\n                  method: 'GET',\n                  headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization' : token\n                  }\n                  //body: JSON.stringify(formData),\n                });\n                if (response.ok) {\n                  const body = await response.json()\n                  console.log(body)\n                  setCategories(body)\n                  setCatEdit(body[0] || '');\n                } else {\n                  console.log('unexpected error getting categories')\n                }\n        } catch (error) {\n            // Handle network or request errors.\n            console.error('An error occurred:', error);\n          }\n    \n       };\n       useEffect(() => {\n        // Call your function here to populate data\n        getCats();\n      }, []);\n\n\n      \n\n    return (\n        <div className=\"min-h-screen flex items-center justify-center bg-custom-image\">\n            <div className=\"bg-white p-8 rounded-md w-full max-w-md mx-auto mt-10\">\n                <div className=\"space-y-4\">\n                    {/* Category Dropdown */}\n                    <div>\n                        <label className=\"text-gray-600\" htmlFor=\"category\">\n                            Category\n                        </label>\n                        <select\n                            id=\"category\"\n                            className=\"mt-1 w-full p-2 border rounded\"\n                            onChange={(e) => setCatEdit(JSON.parse(e.target.value))}\n                        >\n                            {categories.map((category, index) => (\n                                <option key={index} value={JSON.stringify(category)}>\n                                    {category.name}\n                                </option>\n                            ))}\n                        </select>\n                    </div>\n                    {/* New Category Text Section */}\n                    <div>\n                        <label className=\"text-gray-600\" htmlFor=\"newCategory\">\n                            New Category Name\n                        </label>\n                        <input\n                            id=\"newCategory\"\n                            type=\"text\"\n                            className={`mt-1 w-full p-2 border ${reqNewCat ? 'border-red-500 rounded' : 'rounded'}`}\n                            onChange={(e) => setNewCat(e.target.value)}\n                        />\n                    </div>\n                    {/* Save Button */}\n                    <div>\n                        <button\n                            onClick={handleSaveChanges}\n                            className=\"w-full bg-green-400 text-black-700 py-2 rounded-md hover:bg-green-500 focus:outline-none focus:ring-2 focus:ring-green-600\"\n                        >\n                            Edit Category\n                        </button>\n                    </div>\n                    {/* Add Category Button */}\n                    <div>\n                        <button\n                            onClick={handleAddCategory}\n                            className=\"w-full bg-green-400 text-black-700 py-2 rounded-md hover:bg-green-500 focus:outline-none focus:ring-2 focus:ring-green-600\"\n                        >\n                            Add Category\n                        </button>\n                    </div>\n                    {/* Delete Category Button */}\n                    <div>\n                        <button\n                            onClick={handleDeleteCategory}\n                            className=\"w-full bg-red-400 text-black-700 py-2 rounded-md hover:bg-red-500 focus:outline-none focus:ring-2 focus:ring-red-600\"\n                        >\n                            Delete Category\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","/Users/jacquesbecker/Documents/CS3/proj2/25059726/frontend/src/components/note.js",["76","77","78","79"],[],"import React, { useState, useRef, useEffect } from 'react';\nimport { marked } from 'marked';\nimport { UNSAFE_LocationContext, useLocation } from 'react-router-dom';\nimport { useNavigate } from 'react-router-dom';\nexport default function NotesPage(props) {\n\n  const [markdownText, setMarkdownText] = useState('');\n\n\n  const location = useLocation()\n  const token = location.state.token\n  const navigate = useNavigate()\n  const [note, setNote] = useState(location.state.note)\n  const [noteName, setNoteName] = useState(note.title);\n  const [noteContent, setNoteContent] = useState(note.content)\n  const [allUsers, setAllUsers] = useState([])\n  const [toShare, setToShare] = useState({})\n\n  const getAllUsers = async () => {\n    try {\n      const response = await fetch('http://localhost:3000/all-users', {\n        method: 'GET',\n        headers:{\n          'Authorization': token\n        }\n      });\n      if (response.ok) {\n        const body = await response.json()\n        setAllUsers(body)\n        \n      }\n    } catch (error) {\n      console.error(error)\n    }\n  };\n\n  useEffect(() => {\n    getAllUsers();\n    console.log(allUsers)\n}, []);\n\n  const handleUpdateNote = async () => {\n    if (!noteName) {\n      console.log('Note name is empty')\n  } else {\n      try {\n     const response = await fetch(`http://localhost:3000/notes/${note.note_id}`, {\n      method: 'PUT',\n      headers: {\n              'Content-Type': 'application/json',\n             'Authorization': token,\n       },\n       body: JSON.stringify({'title': noteName, 'content' : noteContent}),\n     });\n     console.log(response)\n     if (response.ok) {\n         console.log('note succesfully edited');\n         navigate('/home', {state: {'token': token}})\n     }\n  } catch (error) {\n      console.error(error.message)\n      if (error.response) {\n          console.log(\"tests\", error.response.data)\n      }\n  }\n  }\n  }\n\n  const handleShareNote = async () => {\n    try {\n      const response = await fetch(`http://localhost:3000/share-note`, {\n       method: 'POST',\n       headers: {\n               'Content-Type': 'application/json',\n              'Authorization': token,\n        },\n        body: JSON.stringify({'noteId': note.note_id, 'sharedWithUserId' : parseInt(toShare)}),\n      });\n      console.log(response)\n      if (response.ok) {\n          console.log('note succesfully shared');\n          window.confirm(\"Note succesfully shared\")\n      }\n   } catch (error) {\n       console.error(error.message)\n       if (error.response) {\n          window.confirm(\"Error: Note not shared\")\n           console.log(\"tests\", error.response.data)\n       }\n   }\n  };\n\n  const outputBoxRef = useRef(null);\n\n  useEffect(() => {\n    if (outputBoxRef.current) {\n      outputBoxRef.current.style.height = ''; \n      outputBoxRef.current.style.height = outputBoxRef.current.scrollHeight + 'px';\n    }\n  }, [markdownText]);\n\n  marked.setOptions({\n    breaks: true,\n  });\n\n  return (\n    <div className=\"bg-custom-image p-8 w-full h-full min-h-screen\">\n      <br />\n      <div className=\"mb-10 p-8 bg-white rounded-lg shadow-md\">\n        <div className=\"mb-4 flex items-center\">\n            <label className=\"block text-gray-700 text-sm font-bold mb-2 w-1/6\">Users:</label>\n            <select\n                id=\"category\"\n                onChange={(e) => setToShare(e.target.value)}\n                className=\"mt-1 w-3/4 p-2 border rounded-lg shadow-md mr-8 border-gray-300\"\n            >\n                {allUsers.map((shareuser, index) => (\n                    <option key={index} value={shareuser.user_id}>\n                        {shareuser.username}\n                    </option>\n                ))}\n            </select>\n            <button\n            className=\"w-1/4 bg-blue-600 hover:bg-blue-700 text-gray-50 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-green-600\"\n            onClick={handleShareNote}\n          >\n            Share Note\n          </button>\n        </div>\n        <div className=\"mb-4 flex items-center\">\n          <label className=\"block text-gray-700 text-sm font-bold mb-2 w-1/6\">Note Name:</label>\n          <input\n            type=\"text\"\n            value={noteName}\n            onChange={(e) => setNoteName(e.target.value)}\n            placeholder=\"Enter note name\"\n            className={`w-3/4 p-2 mr-8 bg-white rounded-lg shadow-md border border-gray-300 focus:outline-none focus:ring-2 focus:ring-purple-500 ${!noteName ? 'border-red-500 rounded' : 'rounded'}`}\n          />\n          <button\n            className=\"w-1/4 bg-green-400 hover:bg-green-500 text-gray-700 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-green-600\"\n            onClick={handleUpdateNote}\n          >\n            Save\n          </button>\n        </div>\n\n        {/* Markdown Text Viewer Box with Larger Default Size */}\n        <div className=\"mb-4\">\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\"></label>\n          <div\n            ref={outputBoxRef}\n            className=\"border border-gray-300 p-2 h-48 bg-white rounded-lg shadow-md\" // Adjust the default size (h-48)\n            dangerouslySetInnerHTML={{ __html: marked(noteContent) }}\n          ></div>\n        </div>\n\n        {/* Input Box */}\n        <textarea\n          id=\"markdown\"\n          value={noteContent}\n          onChange={(e) => setNoteContent(e.target.value)}\n          placeholder=\"Type your notes here...\"\n          className=\"w-full p-4 bg-white rounded-lg shadow-md border border-gray-300 focus:outline-none focus:ring-2 focus:ring-purple-500\"\n          rows=\"10\"\n        />\n      </div>\n    </div>\n  );\n}","/Users/jacquesbecker/Documents/CS3/proj2/25059726/frontend/src/components/registerform.js",[],[],"/Users/jacquesbecker/Documents/CS3/proj2/25059726/frontend/src/components/searchbar.js",[],[],{"ruleId":"80","severity":1,"message":"81","line":4,"column":40,"nodeType":"82","messageId":"83","endLine":4,"endColumn":46},{"ruleId":"84","severity":1,"message":"85","line":51,"column":8,"nodeType":"86","endLine":51,"endColumn":10,"suggestions":"87"},{"ruleId":"84","severity":1,"message":"85","line":77,"column":8,"nodeType":"86","endLine":77,"endColumn":10,"suggestions":"88"},{"ruleId":"80","severity":1,"message":"89","line":115,"column":11,"nodeType":"82","messageId":"83","endLine":115,"endColumn":23},{"ruleId":"80","severity":1,"message":"90","line":11,"column":21,"nodeType":"82","messageId":"83","endLine":11,"endColumn":31},{"ruleId":"80","severity":1,"message":"91","line":13,"column":13,"nodeType":"82","messageId":"83","endLine":13,"endColumn":18},{"ruleId":"80","severity":1,"message":"92","line":13,"column":27,"nodeType":"82","messageId":"83","endLine":13,"endColumn":31},{"ruleId":"80","severity":1,"message":"93","line":82,"column":31,"nodeType":"82","messageId":"83","endLine":82,"endColumn":35},{"ruleId":"84","severity":1,"message":"94","line":110,"column":8,"nodeType":"86","endLine":110,"endColumn":10,"suggestions":"95"},{"ruleId":"80","severity":1,"message":"96","line":13,"column":12,"nodeType":"82","messageId":"83","endLine":13,"endColumn":23},{"ruleId":"80","severity":1,"message":"97","line":14,"column":12,"nodeType":"82","messageId":"83","endLine":14,"endColumn":22},{"ruleId":"80","severity":1,"message":"98","line":14,"column":24,"nodeType":"82","messageId":"83","endLine":14,"endColumn":37},{"ruleId":"84","severity":1,"message":"94","line":131,"column":10,"nodeType":"86","endLine":131,"endColumn":12,"suggestions":"99"},{"ruleId":"80","severity":1,"message":"100","line":3,"column":10,"nodeType":"82","messageId":"83","endLine":3,"endColumn":32},{"ruleId":"80","severity":1,"message":"101","line":7,"column":24,"nodeType":"82","messageId":"83","endLine":7,"endColumn":39},{"ruleId":"80","severity":1,"message":"102","line":13,"column":16,"nodeType":"82","messageId":"83","endLine":13,"endColumn":23},{"ruleId":"84","severity":1,"message":"103","line":40,"column":4,"nodeType":"86","endLine":40,"endColumn":6,"suggestions":"104"},"no-unused-vars","'Outlet' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.","ArrayExpression",["105"],["106"],"'updatedNotes' is assigned a value but never used.","'setContent' is assigned a value but never used.","'notes' is assigned a value but never used.","'user' is assigned a value but never used.","'body' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getCats'. Either include it or remove the dependency array.",["107"],"'reqPassword' is assigned a value but never used.","'reqCatName' is assigned a value but never used.","'setReqCatName' is assigned a value but never used.",["108"],"'UNSAFE_LocationContext' is defined but never used.","'setMarkdownText' is assigned a value but never used.","'setNote' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'allUsers' and 'getAllUsers'. Either include them or remove the dependency array.",["109"],{"desc":"110","fix":"111"},{"desc":"110","fix":"112"},{"desc":"113","fix":"114"},{"desc":"113","fix":"115"},{"desc":"116","fix":"117"},"Update the dependencies array to be: [token]",{"range":"118","text":"119"},{"range":"120","text":"119"},"Update the dependencies array to be: [getCats]",{"range":"121","text":"122"},{"range":"123","text":"122"},"Update the dependencies array to be: [allUsers, getAllUsers]",{"range":"124","text":"125"},[1690,1692],"[token]",[2595,2597],[4336,4338],"[getCats]",[4332,4334],[1138,1140],"[allUsers, getAllUsers]"]