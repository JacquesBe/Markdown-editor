{"ast":null,"code":"var _jsxFileName = \"/Users/jacquesbecker/Documents/CS3/proj2/25059726/frontend/src/components/addnote.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddNote(props) {\n  _s();\n  const location = useLocation();\n  const [newnote, setnewnote] = useState('');\n  const [category, setcategory] = useState('');\n  const [content, setContent] = useState('');\n  const navigate = useNavigate();\n  const {\n    notes,\n    token,\n    user\n  } = location.state;\n  const [categories, setCategories] = useState([]);\n  // const categories = ['Work', 'School', 'Personal', 'Other'];  \n\n  const getCats = async () => {\n    try {\n      const response = await fetch(`http://localhost:3000/categories`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Action': 'delete_note',\n          'Authorization': token\n        }\n        //body: JSON.stringify(formData),\n      });\n\n      if (response.ok) {\n        const body = await response.json();\n        console.log(body);\n        setCategories(body);\n      } else {\n        console.log('unexpected error getting categories');\n      }\n    } catch (error) {\n      // Handle network or request errors.\n      console.error('An error occurred:', error);\n    }\n  };\n  const handleSaveChanges = async () => {\n    // Logic to save changes and redirect to home page after successful registration\n    const currentDate = new Date();\n    const year = currentDate.getFullYear();\n    const day = String(currentDate.getDate()).padStart(2, '0');\n    const month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Month is 0-based\n    const hours = String(currentDate.getHours()).padStart(2, '0');\n    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\n    const seconds = String(currentDate.getSeconds()).padStart(2, '0');\n    const milliseconds = String(currentDate.getMilliseconds()).padStart(3, '0');\n    const isoDateString = `${year}-${month}-${day}T${hours}:${minutes}:${seconds}.${milliseconds}Z`;\n    console.log(isoDateString);\n    const tempNewNote = {\n      'note_id': '',\n      'title': newnote,\n      'content': content,\n      'category': category,\n      'last_update': isoDateString\n    };\n    try {\n      const response = await fetch('http://localhost:3000/notes', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Action': 'addnote',\n          'Authorization': token\n        },\n        body: JSON.stringify(tempNewNote)\n      });\n      if (response.ok) {\n        //MUST CHANGE TO RESPONSE.OK FOR LOGIN VALIDATION\n        // Handle a successful login (e.g., redirect to another page).\n        try {\n          const response = await fetch('http://localhost:3000/notes', {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              'Action': 'getnotes',\n              'Authorization': token\n            }\n          });\n          if (response.ok) {\n            //MUST CHANGE TO RESPONSE.OK FOR LOGIN VALIDATION\n            // Handle a successful login (e.g., redirect to another page).\n            const body = await response.json();\n            navigate('/home', {\n              state: {\n                'token': token\n              }\n            });\n          } else {\n            // Handle login errors (e.g., display an error message).\n            console.error('Server Error');\n          }\n        } catch (error) {\n          console.error('An error occurred:', error);\n        }\n\n        //navigate('/home', { state: { notes, token } });\n      } else {\n        // Handle login errors (e.g., display an error message).\n        console.error('add Note Failed');\n      }\n    } catch (error) {\n      // Handle network or request errors.\n      console.error('An error occurred:', error);\n    }\n  };\n  useEffect(() => {\n    // Call your function here to populate data\n    getCats();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex items-center justify-center bg-custom-image\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white p-8 rounded-md w-full max-w-md mx-auto mt-10 \",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"text-gray-600\",\n            htmlFor: \"email\",\n            children: \"Note Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"Name\",\n            type: \"text\",\n            onChange: e => setnewnote(e.target.value),\n            className: \"mt-1 w-full p-2 border rounded\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"text-gray-600\",\n            htmlFor: \"username\",\n            children: \"Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"category\",\n            onChange: e => setcategory(e.target.value),\n            className: \"mt-1 w-full p-2 border rounded\",\n            children: categories.map((cat, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: cat.name,\n              children: cat.name\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between items-center mt-6\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSaveChanges,\n            className: \"w-full bg-green-400 text-gray-700 py-2 rounded-md hover:bg-green-500 focus:outline-none focus:ring-2 focus:ring-green-600\",\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n}\n_s(AddNote, \"zDBhgMCQySG+mPB56OWlEj0RnWs=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = AddNote;\n;\nvar _c;\n$RefreshReg$(_c, \"AddNote\");","map":{"version":3,"names":["React","useState","useNavigate","useLocation","useEffect","jsxDEV","_jsxDEV","AddNote","props","_s","location","newnote","setnewnote","category","setcategory","content","setContent","navigate","notes","token","user","state","categories","setCategories","getCats","response","fetch","method","headers","ok","body","json","console","log","error","handleSaveChanges","currentDate","Date","year","getFullYear","day","String","getDate","padStart","month","getMonth","hours","getHours","minutes","getMinutes","seconds","getSeconds","milliseconds","getMilliseconds","isoDateString","tempNewNote","JSON","stringify","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","type","onChange","e","target","value","map","cat","index","name","onClick","_c","$RefreshReg$"],"sources":["/Users/jacquesbecker/Documents/CS3/proj2/25059726/frontend/src/components/addnote.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport { useEffect } from 'react';\n\n\nexport default function AddNote(props) {\n    const location = useLocation();\n    const [newnote, setnewnote] = useState('');\n    const [category, setcategory] = useState('');\n    const [content, setContent] = useState('');\n    const navigate = useNavigate();\n    const { notes, token ,user} = location.state;\n\n    const [categories, setCategories] = useState([]);\n   // const categories = ['Work', 'School', 'Personal', 'Other'];  \n\n   const getCats = async () => {\n    try {\n      const response = await fetch(`http://localhost:3000/categories`, {\n              method: 'GET',\n              headers: {\n                'Content-Type': 'application/json',\n                'Action': 'delete_note',\n                'Authorization' : token\n              }\n              //body: JSON.stringify(formData),\n            });\n            if (response.ok) {\n              const body = await response.json()\n              console.log(body)\n              setCategories(body)\n            } else {\n              console.log('unexpected error getting categories')\n            }\n    } catch (error) {\n        // Handle network or request errors.\n        console.error('An error occurred:', error);\n      }\n\n   };\n\n    const handleSaveChanges = async () => {\n        // Logic to save changes and redirect to home page after successful registration\n        const currentDate = new Date();\n\n        const year = currentDate.getFullYear();\n        const day = String(currentDate.getDate()).padStart(2, '0');\n        const month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Month is 0-based\n        const hours = String(currentDate.getHours()).padStart(2, '0');\n        const minutes = String(currentDate.getMinutes()).padStart(2, '0');\n        const seconds = String(currentDate.getSeconds()).padStart(2, '0');\n        const milliseconds = String(currentDate.getMilliseconds()).padStart(3, '0');\n        const isoDateString = `${year}-${month}-${day}T${hours}:${minutes}:${seconds}.${milliseconds}Z`;\n        console.log(isoDateString)\n        const tempNewNote = { 'note_id': '', 'title': newnote, 'content': content, 'category': category, 'last_update': isoDateString }\n\n        \n        try {\n            const response = await fetch('http://localhost:3000/notes', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                'Action': 'addnote',\n                'Authorization' : token,\n              },\n              body: JSON.stringify(tempNewNote),\n            });\n            if (response.ok) { //MUST CHANGE TO RESPONSE.OK FOR LOGIN VALIDATION\n              // Handle a successful login (e.g., redirect to another page).\n                try {\n                    const response = await fetch('http://localhost:3000/notes', {\n                    method: 'GET',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Action': 'getnotes',\n                        'Authorization': token\n                },\n                    });\n                    if (response.ok) { //MUST CHANGE TO RESPONSE.OK FOR LOGIN VALIDATION\n                        // Handle a successful login (e.g., redirect to another page).\n                        const body = await response.json();\n                        navigate('/home', { state: {'token': token} });\n                      } else {\n                        // Handle login errors (e.g., display an error message).\n                        console.error('Server Error');\n                      }\n                \n                } catch (error) {\n                console.error('An error occurred:', error);\n                }\n\n              //navigate('/home', { state: { notes, token } });\n            } else {\n              // Handle login errors (e.g., display an error message).\n              console.error('add Note Failed');\n            }\n          } catch (error) {\n            // Handle network or request errors.\n            console.error('An error occurred:', error);\n          }\n    };\n\n\n    \n    useEffect(() => {\n      // Call your function here to populate data\n      getCats();\n      \n    }, []);\n\n    return (\n        <div className=\"min-h-screen flex items-center justify-center bg-custom-image\">\n            \n            <div className=\"bg-white p-8 rounded-md w-full max-w-md mx-auto mt-10 \">\n                <div className=\"space-y-4\">\n                    <div>\n                        <label className=\"text-gray-600\" htmlFor=\"email\">Note Name</label>\n                        <input \n                            id=\"Name\"\n                            type=\"text\"\n                            onChange={e => setnewnote(e.target.value)}\n                            className=\"mt-1 w-full p-2 border rounded\"\n                        />\n                    </div>\n                    <div>\n                        <label className=\"text-gray-600\" htmlFor=\"username\">\n                          Category\n                        </label>\n                        <select\n                            id=\"category\"\n                            onChange={(e) => setcategory(e.target.value)}\n                            className=\"mt-1 w-full p-2 border rounded\"\n                        >\n                            {categories.map((cat, index) => (\n                                <option key={index} value={cat.name}>\n                                    {cat.name}\n                                </option>\n                            ))}\n                        </select>\n                    </div>\n                    <div className=\"flex justify-between items-center mt-6\">\n                        <button \n                            onClick={handleSaveChanges}\n                            className=\"w-full bg-green-400 text-gray-700 py-2 rounded-md hover:bg-green-500 focus:outline-none focus:ring-2 focus:ring-green-600\"\n                        >\n                            Save\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        );\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}